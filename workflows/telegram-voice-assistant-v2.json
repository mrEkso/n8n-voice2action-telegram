{
  "name": "Telegram Voice Assistant - Complete",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"]
      },
      "id": "1",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [250, 300],
      "webhookId": "voice-assistant-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [
            {
              "value1": "={{ $json.message.voice }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "2",
      "name": "Is Voice Message?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
      },
      "id": "3",
      "name": "Send Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [650, 450]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "fileId": "={{ $json.message.voice.file_id }}"
      },
      "id": "4",
      "name": "Get Voice File Info",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [650, 150]
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/file/bot{{ $env.TELEGRAM_BOT_TOKEN }}/{{ $json.file_path }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "5",
      "name": "Download Voice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 150]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://whisper:9000/asr?task=transcribe&language=auto&output=json",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "audio_file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "timeout": 120000
        }
      },
      "id": "6",
      "name": "Whisper Transcribe",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1050, 150]
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.text || '';\nconst chatId = $('Telegram Trigger').first().json.message.chat.id;\nconst userName = $('Telegram Trigger').first().json.message.from.first_name || 'User';\n\nreturn {\n  transcribedText: text.trim(),\n  chatId: chatId,\n  userName: userName,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "7",
      "name": "Extract Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 150]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={{ $env.GEMINI_API_KEY }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": \"Analyze this voice command and respond appropriately. If user wants to send email, extract recipient, subject, and body. If user wants calendar event, extract title, date, time. User said: {{ $json.transcribedText }}\"\n    }]\n  }]\n}",
        "options": {}
      },
      "id": "8",
      "name": "Gemini AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1450, 150]
    },
    {
      "parameters": {
        "jsCode": "const gemini = $input.first().json;\nconst text = $('Extract Data').first().json.transcribedText.toLowerCase();\nconst response = gemini.candidates?.[0]?.content?.parts?.[0]?.text || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.';\n\nlet intent = 'general';\nlet data = {};\n\nif (text.includes('email') || text.includes('–ø–∏—Å—å–º–æ') || text.includes('–æ—Ç–ø—Ä–∞–≤')) {\n  intent = 'email';\n  const emailMatch = text.match(/([a-z0-9._-]+@[a-z0-9._-]+\\.[a-z]{2,})/i);\n  data = {\n    recipient: emailMatch ? emailMatch[0] : '',\n    subject: 'Voice Message',\n    body: response\n  };\n} else if (text.includes('–∫–∞–ª–µ–Ω–¥–∞—Ä') || text.includes('—Å–æ–±—ã—Ç–∏–µ') || text.includes('–≤—Å—Ç—Ä–µ—á')) {\n  intent = 'calendar';\n  const now = new Date();\n  data = {\n    title: text.substring(0, 100),\n    start: now.toISOString(),\n    end: new Date(now.getTime() + 3600000).toISOString(),\n    description: response\n  };\n}\n\nreturn {\n  intent: intent,\n  response: response,\n  data: data,\n  chatId: $('Extract Data').first().json.chatId\n};"
      },
      "id": "9",
      "name": "Parse Intent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 150]
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "rules": [
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.intent }}",
                    "value2": "email"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "email"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.intent }}",
                    "value2": "calendar"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "calendar"
            }
          ]
        },
        "fallbackOutput": "extra"
      },
      "id": "10",
      "name": "Route Intent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1850, 150]
    },
    {
      "parameters": {
        "operation": "send",
        "email": "={{ $json.data.recipient }}",
        "subject": "={{ $json.data.subject }}",
        "message": "={{ $json.data.body }}",
        "options": {}
      },
      "id": "11",
      "name": "Send Gmail",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [2050, 50]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "create",
        "calendarId": "primary",
        "start": "={{ $json.data.start }}",
        "end": "={{ $json.data.end }}",
        "summary": "={{ $json.data.title }}",
        "description": "={{ $json.data.description }}",
        "options": {}
      },
      "id": "12",
      "name": "Create Calendar Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.2,
      "position": [2050, 200]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ö–æ–º—É: {{ $json.data.recipient }}\n–¢–µ–º–∞: {{ $json.data.subject }}"
      },
      "id": "13",
      "name": "Confirm Email",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2250, 50]
    },
    {
      "parameters": {
        "chatId": "={{ $('Parse Intent').first().json.chatId }}",
        "text": "=üìÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {{ $json.summary }}\n–í—Ä–µ–º—è: {{ $json.start.dateTime }}"
      },
      "id": "14",
      "name": "Confirm Calendar",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2250, 200]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.response }}"
      },
      "id": "15",
      "name": "Send Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2050, 350]
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [[{"node": "Is Voice Message?", "type": "main", "index": 0}]]
    },
    "Is Voice Message?": {
      "main": [
        [{"node": "Get Voice File Info", "type": "main", "index": 0}],
        [{"node": "Send Error", "type": "main", "index": 0}]
      ]
    },
    "Get Voice File Info": {
      "main": [[{"node": "Download Voice", "type": "main", "index": 0}]]
    },
    "Download Voice": {
      "main": [[{"node": "Whisper Transcribe", "type": "main", "index": 0}]]
    },
    "Whisper Transcribe": {
      "main": [[{"node": "Extract Data", "type": "main", "index": 0}]]
    },
    "Extract Data": {
      "main": [[{"node": "Gemini AI", "type": "main", "index": 0}]]
    },
    "Gemini AI": {
      "main": [[{"node": "Parse Intent", "type": "main", "index": 0}]]
    },
    "Parse Intent": {
      "main": [[{"node": "Route Intent", "type": "main", "index": 0}]]
    },
    "Route Intent": {
      "main": [
        [{"node": "Send Gmail", "type": "main", "index": 0}],
        [{"node": "Create Calendar Event", "type": "main", "index": 0}],
        [{"node": "Send Response", "type": "main", "index": 0}]
      ]
    },
    "Send Gmail": {
      "main": [[{"node": "Confirm Email", "type": "main", "index": 0}]]
    },
    "Create Calendar Event": {
      "main": [[{"node": "Confirm Calendar", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-03T01:19:14.000Z",
  "versionId": "1.0.0"
}
